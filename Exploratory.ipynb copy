{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib as mpl\n",
    "import matplotlib.pylab as plt\n",
    "import seaborn as sns\n",
    "import pandas as pd\n",
    "import datetime\n",
    "import numpy as np\n",
    "% matplotlib inline\n",
    "mpl.rcParams[\"font.size\"] = 20"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.options.display.max_columns = 100"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='eda'></a>\n",
    "## Exploratory Data Analysis\n",
    "\n",
    "> **Tip**: Now that you've trimmed and cleaned your data, you're ready to move on to exploration. Compute statistics and create visualizations with the goal of addressing the research questions that you posed in the Introduction section. It is recommended that you be systematic with your approach. Look at one variable at a time, and then follow it up by looking at relationships between variables.\n",
    "\n",
    "### Research Question 1 (Replace this header name!)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "date_1 = datetime.datetime.now()\n",
    "df = pd.read_csv('../Data/P2/tmdb-movies_Cleaning_4')\n",
    "date_2 = datetime.datetime.now()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "read time  :  0:01:47.892190\n"
     ]
    }
   ],
   "source": [
    "print('read time  : ',date_2 - date_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def  CountGenres(dfIn,title,fromHow):\n",
    "    fig_size = (150,100)\n",
    "    title_fontsize = 70\n",
    "\n",
    "    x_fontsize = 70\n",
    "    xtick_labels_size = 50\n",
    "\n",
    "    y_fontsize = 50\n",
    "    ytick_labels_size = 60\n",
    "    \n",
    "    legendFontSize = 50\n",
    "    \n",
    "    color = ['#9966CC',   # Amethyst\n",
    "     '#964B00',  #Brown\n",
    "     '#7FFFD4',  #Aquamarine\n",
    "     '#007FFF', #Azure\n",
    "     '#000000',  #Black \n",
    "     '#800020', #Burgundy \n",
    "     '#7FFF00', #Chartreuse green\n",
    "     '#FF7F50', #Coral\n",
    "     '#FFF700', #Lemon - \n",
    "     '#FF0000', #RED\n",
    "     '#29AB87', #Jungle green\n",
    "     '#EDC9Af', #Desert sand\n",
    "     '#702963'] #Byzantium\n",
    "\n",
    "\n",
    "    fig, ax = plt.subplots(nrows=1,ncols=1,figsize= fig_size)  \n",
    "    \n",
    "    maxY = 0\n",
    " \n",
    "    \n",
    "    for _ in [x for x in df.columns if 'genres' in x]: \n",
    "        all___genres_movies= dfIn[dfIn[f'{_}'] == 1]\n",
    "\n",
    "        if(len(all___genres_movies) > 500):\n",
    "            groupby_release_year = all___genres_movies.groupby('release_year') \n",
    "            \n",
    "\n",
    "            year = groupby_release_year.sum().index\n",
    "            movies_count = groupby_release_year.original_title.count().values \n",
    "\n",
    "            if maxY < max(movies_count):\n",
    "                maxY = max(movies_count)\n",
    "                \n",
    "#             print(f'{_} count is : {len(all___genres_movies)}')\n",
    "            ax.plot(year,movies_count, color=color.pop(), linewidth=2, label=f'{_}')\n",
    "\n",
    "    \n",
    "    \n",
    "    ax.set_title(f'Movies Genres Count from {title}',fontsize=title_fontsize)\n",
    "    \n",
    "    ax.set_xticks(list(range(year.min(),year.max(),2)))\n",
    "    ax.set_xticklabels(list(range(year.min(),year.max(),2)),fontsize=xtick_labels_size) \n",
    "    ax.set_xlabel('Year',fontsize=x_fontsize)\n",
    "    \n",
    "     \n",
    "    ax.set_yticks(list(range(0,maxY,5)))\n",
    "    ax.set_yticklabels(list(range(0,maxY,5)),fontsize=ytick_labels_size)  \n",
    "    ax.set_ylabel('Movies Count',fontsize=y_fontsize)\n",
    "    plt.legend(fontsize=legendFontSize)\n",
    "    \n",
    "    plt.savefig(f'Ploting/CountGenres/{fromHow}/{Company}_genres_movies_count_for_each_year.png')\n",
    "    print(\"*\"*5,\"CountGenres PLOTING Was Save Successfully Save \")\n",
    "    print(\"*\"*5,f\"Ploting/CountGenres/{fromHow}/{Company}_genres_movies_count_for_each_year.png \")\n",
    "    print()\n",
    "#     plt.show() #bad visualisation please open this folder ../Ploting/Top10 creating movies\n",
    "    plt.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Top_and_worst_10(top_10In,worst_10In,Company,ByWichColumn,fromHow): \n",
    "    mpl.rcParams[\"font.size\"] = 15\n",
    "    fig, ax = plt.subplots(nrows=2,ncols=1,figsize= (40,20)) \n",
    "\n",
    "    my_range=range(1,len(top_10In.original_title.index)+1)\n",
    "    y_data = top_10In[::-1].original_title.values\n",
    "    x_data = top_10In[::-1][f'{ByWichColumn}'].values\n",
    "\n",
    "    ax[0].hlines(y=my_range, xmin=0, xmax=x_data, color='green' ) \n",
    "    ax[0].plot(x_data, my_range, \"o\")\n",
    "\n",
    "    ax[0].set_yticks(list(range(1,len(y_data)+1)))\n",
    "    ax[0].set_yticklabels( y_data,rotation=0)\n",
    "\n",
    "\n",
    "    ax[0].set_title(f\"Top 10 Movies by {ByWichColumn} from {Company}\",fontsize=(25))\n",
    "    ax[0].set_xlabel(f'{ByWichColumn}',fontsize=(25))\n",
    "    ax[0].set_ylabel('Movies name')\n",
    "\n",
    "\n",
    "    my_range=range(1,len(worst_10In.original_title.index)+1)\n",
    "    y_data = worst_10In[::-1].original_title.values\n",
    "    x_data = worst_10In[::-1][f'{ByWichColumn}'].values\n",
    "\n",
    "    ax[1].hlines(y=my_range, xmin=0, xmax=x_data, color='red' ) \n",
    "    ax[1].plot(x_data, my_range, \"o\")\n",
    "\n",
    "    ax[1].set_yticks(list(range(1,len(y_data)+1)))\n",
    "    ax[1].set_yticklabels( y_data,rotation=0)\n",
    "\n",
    "    ax[1].set_title(f\"Worst 10 Movies by {ByWichColumn} from {Company}\",fontsize=(25))\n",
    "    ax[1].set_xlabel(f'{ByWichColumn}',fontsize=(25))\n",
    "    ax[1].set_ylabel('Movies name')\n",
    "\n",
    "\n",
    "    plt.savefig(f'Ploting/Top_and_worst_10/{ByWichColumn}/{fromHow}/{Company}.png')\n",
    "    print(\"*\"*5,f\"Top_and_worst_10 by {ByWichColumn} PLOTING Was Save Successfully Save \")\n",
    "    print(\"*\"*5,f\"Ploting/Top_and_worst_10/{ByWichColumn}/{fromHow}/{Company}.png\")\n",
    "    print()\n",
    "#     plt.show() \n",
    "    plt.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Revenue_and_Budget(revenueIn,budgetIn,yearIn,Company,fromHow):\n",
    "    # font size \n",
    "    mpl.rcParams[\"font.size\"] = 60   \n",
    "\n",
    "    #  starting with empty page \n",
    "    fig, ax = plt.subplots(nrows=1,ncols=1,figsize= (80,40)) \n",
    "\n",
    "    # bar Width\n",
    "    barWidth = 0.3\n",
    "\n",
    "    # varibal to use when call  revenueIn , budgetIn\n",
    "    number = -15\n",
    "\n",
    "    # bar_1_data\n",
    "    bar_1_data = revenueIn[number:]\n",
    "    # bar_2_data \n",
    "    bar_2_data = budgetIn[number:] \n",
    "    \n",
    "    # y data \n",
    "    y_data = yearIn[number:]\n",
    "    \n",
    "    # bars position\n",
    "    bar_1_pos = np.arange(len(bar_1_data))\n",
    "    bar_2_pos = [x + barWidth for x in bar_1_pos]\n",
    "\n",
    "    #  draw bar 1\n",
    "    ax.bar(bar_1_pos,            # الموقع \n",
    "           bar_1_data,     # بيانات للجانب اليسار  (y)\n",
    "           width = barWidth,     #  عرض البار \n",
    "           color = 'green',      # لون البار\n",
    "           edgecolor = 'black',  # لون حدود البار\n",
    "           yerr=y_data,   # بيانات الجانب السفلي (x)\n",
    "           label='revenue')      # اسم البار ليتم عرضه بالليجند \n",
    "\n",
    "    #  draw bar 2\n",
    "    ax.bar(bar_2_pos,bar_2_data,width = barWidth,color = 'black',edgecolor = 'black',yerr=y_data,label='budget')\n",
    "\n",
    "    # bar legend\n",
    "    ax.legend()\n",
    "\n",
    "    #  remove y axis scale\n",
    "    ax.set_yticklabels(ax.get_yticks())  \n",
    "\n",
    "    #  x ticks count\n",
    "    ax.set_xticks([r + barWidth for r in range(len(y_data))])\n",
    "\n",
    "    #  x ticks label\n",
    "    ax.set_xticklabels( y_data,rotation=80)\n",
    "\n",
    "    #  y label\n",
    "    ax.set_ylabel('Total in Dolar ',fontsize=60)\n",
    "\n",
    "    #  title \n",
    "    ax.set_title(f'Sum of Revenue and Budget for all moveis in 2001 - 2015 from  {Company}',fontsize=70)\n",
    "\n",
    "    # save and Show graphic\n",
    "    plt.savefig(f'Ploting/Revenue_and_Budget/{fromHow}/{Company}.png')\n",
    "    print(\"*\"*5,f\"Revenue_and_Budget  PLOTING Was Save Successfully Save \")\n",
    "    print(\"*\"*5,f\"Ploting/Revenue_and_Budget/{fromHow}/{Company}.png\")\n",
    "    print()\n",
    "#     plt.show()\n",
    "    plt.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [],
   "source": [
    "def genres_movies(genres_movies_count,genres_Names,Compnay,fromHow):\n",
    "    mpl.rcParams[\"font.size\"] = 15   \n",
    "    fig , ax = plt.subplots(nrows=1,ncols=1,figsize= (20,10))\n",
    "\n",
    "    ax.set_title(f'Count for genres Moveis from {Compnay}',fontsize=20)\n",
    "    ax.set_xlabel('Moveis Count',fontsize=15)\n",
    "\n",
    "    # ax.bar()\n",
    "    sns.barplot(genres_movies_count,genres_Names,ax=ax)\n",
    "\n",
    "    plt.savefig(f'Ploting/genres_movies/{fromHow}/{Company}.png')\n",
    "    print(\"*\"*5,f\"genres_movies  PLOTING Was Save Successfully Save \")\n",
    "    print(\"*\"*5,f\"Ploting/genres_movies/{fromHow}/{Company}.png\")\n",
    "    print()\n",
    "#     plt.show()\n",
    "    plt.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Prepare the data to use it in ploting  ( with all movies ) \n",
    "**this for all company**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [],
   "source": [
    "# how many movies for each genres\n",
    "all_genres_movies_count = df[[x for x in df.columns if \"genres\" in x]].sum().sort_values(ascending=False)\n",
    "\n",
    "# just remove _genres from the name\n",
    "genres_Names = [x.replace('_genres','') for x in all_genres_movies_count.index]\n",
    "\n",
    "#  get top 10 by runtime \n",
    "top_10_runtime = df.sort_values('runtime',ascending=False)[:10]\n",
    "\n",
    "#  get worst 10 by runtime \n",
    "worst_10_runtime = df.query('runtime != 0').sort_values('runtime',ascending=True)[:10]\n",
    "\n",
    "# get top 10 by vote average\n",
    "top_10_vote_average = df.query('vote_count > 1000').sort_values('vote_average',ascending=False)[:10]\n",
    "\n",
    "# get worst 10 by vote average\n",
    "worst_10_vote_average = df.query('vote_count != 0').sort_values('vote_average',ascending=True)[:10]\n",
    "\n",
    "# groupby release year\n",
    "groupby_release_year = df.groupby('release_year')\n",
    "\n",
    "# get all year \n",
    "year = groupby_release_year.sum().index\n",
    "\n",
    "# get sum of all budget on every year\n",
    "budget = groupby_release_year['budget'].sum().values\n",
    "\n",
    "# get sum of all revenue on every year\n",
    "revenue = groupby_release_year['revenue'].sum().values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# plot the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*************** Start  plot for ALL movies ***************\n",
      "***** Top_and_worst_10 by runtime PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/runtime/ALL/ALL movies.png\n",
      "\n",
      "***** Top_and_worst_10 by vote_average PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/vote_average/ALL/ALL movies.png\n",
      "\n",
      "***** Revenue_and_Budget  PLOTING Was Save Successfully Save \n",
      "***** Ploting/Revenue_and_Budget/ALL/ALL movies.png\n",
      "\n",
      "***** genres_movies  PLOTING Was Save Successfully Save \n",
      "***** Ploting/genres_movies/ALL/ALL movies.png\n",
      "\n",
      "***** CountGenres PLOTING Was Save Successfully Save \n",
      "***** Ploting/CountGenres/ALL/ALL movies_genres_movies_count_for_each_year.png \n",
      "\n",
      "*************** End  plot for ALL movies ***************\n"
     ]
    }
   ],
   "source": [
    "Company = \"ALL movies\"\n",
    "print('*'*15,f'Start  plot for {Company}','*'*15)\n",
    "Top_and_worst_10(top_10In=top_10_runtime,worst_10In=worst_10_runtime,Company=Company,ByWichColumn='runtime',fromHow='ALL')\n",
    "Top_and_worst_10(top_10In=top_10_vote_average,worst_10In=worst_10_vote_average,Company=Company,ByWichColumn='vote_average',fromHow='ALL')\n",
    "Revenue_and_Budget(revenueIn=revenue,budgetIn=budget,yearIn=year,Company=Company,fromHow='ALL')\n",
    "genres_movies(genres_movies_count=all_genres_movies_count.values,genres_Names=genres_Names,Compnay=Company,fromHow='ALL')\n",
    "CountGenres(df,title=Company,fromHow='ALL')\n",
    "print('*'*15,f'End  plot for {Company}','*'*15)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Get top 10 production company ( with production_companies )  \n",
    "**plot was save in (Ploting/Top10 creating movies/Top10 in creating movies by Production companies.png)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "***** Top10 in creating movies by Production companies PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top10 creating movies/Top10 in creating movies by Production companies.png\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# all_production_companies_movies_count \n",
    "\n",
    "fig_size = (150,70)\n",
    "title_fontsize = 70\n",
    "\n",
    "x_fontsize = 70\n",
    "xtick_labels_size = 50\n",
    "\n",
    "y_fontsize = 50\n",
    "ytick_labels_size = 60\n",
    "\n",
    "\n",
    "all_production_companies_movies_count = df[[x for x in df.columns if \"production_companies\" in x]].sum().sort_values(ascending=False)\n",
    "Top10 = all_production_companies_movies_count[:10] \n",
    "Top10_Names = [x.replace('_production_companies','') for x in Top10.index]\n",
    "\n",
    "\n",
    "fig , ax = plt.subplots(nrows=1,ncols=1,figsize= fig_size)\n",
    "ax.set_title('Top 10 Production companies in Create Moveis',fontsize=title_fontsize)\n",
    "ax.set_xlabel('Moveis Count',fontsize=x_fontsize)\n",
    "ax.set_yticklabels(Top10_Names,fontsize=ytick_labels_size)\n",
    "\n",
    "ax.set_xticks(list(range(0,Top10.values.max(),20)))\n",
    "ax.set_xticklabels(list(range(0,Top10.values.max(),20)),fontsize=xtick_labels_size)\n",
    "\n",
    "sns.barplot(Top10.values,Top10_Names,ax=ax)\n",
    "plt.savefig(f'Ploting/Top10 creating movies/Top10 in creating movies by Production companies.png')\n",
    "print(\"*\"*5,f\"Top10 in creating movies by Production companies PLOTING Was Save Successfully Save \")\n",
    "print(\"*\"*5,f\"Ploting/Top10 creating movies/Top10 in creating movies by Production companies.png\")\n",
    "print()\n",
    "# plt.show()  #bad visualisation please open this folder ../Ploting/Top10 creating movies\n",
    "plt.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Get details for top 10 production company "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Woody Allen_director',\n",
       " 'Clint Eastwood_director',\n",
       " 'Steven Spielberg_director',\n",
       " 'Martin Scorsese_director',\n",
       " 'Ridley Scott_director',\n",
       " 'Steven Soderbergh_director',\n",
       " 'Ron Howard_director',\n",
       " 'Joel Schumacher_director',\n",
       " 'Brian De Palma_director',\n",
       " 'Tim Burton_director']"
      ]
     },
     "execution_count": 205,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(Top10.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*************** Start  plot for Universal Pictures_production_companies ***************\n",
      "***** Top_and_worst_10 by runtime PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/runtime/production company/Universal Pictures_production_companies.png\n",
      "\n",
      "***** Top_and_worst_10 by vote_average PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/vote_average/production company/Universal Pictures_production_companies.png\n",
      "\n",
      "***** Revenue_and_Budget  PLOTING Was Save Successfully Save \n",
      "***** Ploting/Revenue_and_Budget/production company/Universal Pictures_production_companies.png\n",
      "\n",
      "***** genres_movies  PLOTING Was Save Successfully Save \n",
      "***** Ploting/genres_movies/production company/Universal Pictures_production_companies.png\n",
      "\n",
      "*************** End  plot for Universal Pictures_production_companies ***************\n",
      "*************** Start  plot for Warner Bros._production_companies ***************\n",
      "***** Top_and_worst_10 by runtime PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/runtime/production company/Warner Bros._production_companies.png\n",
      "\n",
      "***** Top_and_worst_10 by vote_average PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/vote_average/production company/Warner Bros._production_companies.png\n",
      "\n",
      "***** Revenue_and_Budget  PLOTING Was Save Successfully Save \n",
      "***** Ploting/Revenue_and_Budget/production company/Warner Bros._production_companies.png\n",
      "\n",
      "***** genres_movies  PLOTING Was Save Successfully Save \n",
      "***** Ploting/genres_movies/production company/Warner Bros._production_companies.png\n",
      "\n",
      "*************** End  plot for Warner Bros._production_companies ***************\n",
      "*************** Start  plot for Paramount Pictures_production_companies ***************\n",
      "***** Top_and_worst_10 by runtime PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/runtime/production company/Paramount Pictures_production_companies.png\n",
      "\n",
      "***** Top_and_worst_10 by vote_average PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/vote_average/production company/Paramount Pictures_production_companies.png\n",
      "\n",
      "***** Revenue_and_Budget  PLOTING Was Save Successfully Save \n",
      "***** Ploting/Revenue_and_Budget/production company/Paramount Pictures_production_companies.png\n",
      "\n",
      "***** genres_movies  PLOTING Was Save Successfully Save \n",
      "***** Ploting/genres_movies/production company/Paramount Pictures_production_companies.png\n",
      "\n",
      "*************** End  plot for Paramount Pictures_production_companies ***************\n",
      "*************** Start  plot for Twentieth Century Fox Film Corporation_production_companies ***************\n",
      "***** Top_and_worst_10 by runtime PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/runtime/production company/Twentieth Century Fox Film Corporation_production_companies.png\n",
      "\n",
      "***** Top_and_worst_10 by vote_average PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/vote_average/production company/Twentieth Century Fox Film Corporation_production_companies.png\n",
      "\n",
      "***** Revenue_and_Budget  PLOTING Was Save Successfully Save \n",
      "***** Ploting/Revenue_and_Budget/production company/Twentieth Century Fox Film Corporation_production_companies.png\n",
      "\n",
      "***** genres_movies  PLOTING Was Save Successfully Save \n",
      "***** Ploting/genres_movies/production company/Twentieth Century Fox Film Corporation_production_companies.png\n",
      "\n",
      "*************** End  plot for Twentieth Century Fox Film Corporation_production_companies ***************\n",
      "*************** Start  plot for Columbia Pictures_production_companies ***************\n",
      "***** Top_and_worst_10 by runtime PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/runtime/production company/Columbia Pictures_production_companies.png\n",
      "\n",
      "***** Top_and_worst_10 by vote_average PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/vote_average/production company/Columbia Pictures_production_companies.png\n",
      "\n",
      "***** Revenue_and_Budget  PLOTING Was Save Successfully Save \n",
      "***** Ploting/Revenue_and_Budget/production company/Columbia Pictures_production_companies.png\n",
      "\n",
      "***** genres_movies  PLOTING Was Save Successfully Save \n",
      "***** Ploting/genres_movies/production company/Columbia Pictures_production_companies.png\n",
      "\n",
      "*************** End  plot for Columbia Pictures_production_companies ***************\n",
      "*************** Start  plot for New Line Cinema_production_companies ***************\n",
      "***** Top_and_worst_10 by runtime PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/runtime/production company/New Line Cinema_production_companies.png\n",
      "\n",
      "***** Top_and_worst_10 by vote_average PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/vote_average/production company/New Line Cinema_production_companies.png\n",
      "\n",
      "***** Revenue_and_Budget  PLOTING Was Save Successfully Save \n",
      "***** Ploting/Revenue_and_Budget/production company/New Line Cinema_production_companies.png\n",
      "\n",
      "***** genres_movies  PLOTING Was Save Successfully Save \n",
      "***** Ploting/genres_movies/production company/New Line Cinema_production_companies.png\n",
      "\n",
      "*************** End  plot for New Line Cinema_production_companies ***************\n",
      "*************** Start  plot for Metro-Goldwyn-Mayer (MGM)_production_companies ***************\n",
      "***** Top_and_worst_10 by runtime PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/runtime/production company/Metro-Goldwyn-Mayer (MGM)_production_companies.png\n",
      "\n",
      "***** Top_and_worst_10 by vote_average PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/vote_average/production company/Metro-Goldwyn-Mayer (MGM)_production_companies.png\n",
      "\n",
      "***** Revenue_and_Budget  PLOTING Was Save Successfully Save \n",
      "***** Ploting/Revenue_and_Budget/production company/Metro-Goldwyn-Mayer (MGM)_production_companies.png\n",
      "\n",
      "***** genres_movies  PLOTING Was Save Successfully Save \n",
      "***** Ploting/genres_movies/production company/Metro-Goldwyn-Mayer (MGM)_production_companies.png\n",
      "\n",
      "*************** End  plot for Metro-Goldwyn-Mayer (MGM)_production_companies ***************\n",
      "*************** Start  plot for Walt Disney Pictures_production_companies ***************\n",
      "***** Top_and_worst_10 by runtime PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/runtime/production company/Walt Disney Pictures_production_companies.png\n",
      "\n",
      "***** Top_and_worst_10 by vote_average PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/vote_average/production company/Walt Disney Pictures_production_companies.png\n",
      "\n",
      "***** Revenue_and_Budget  PLOTING Was Save Successfully Save \n",
      "***** Ploting/Revenue_and_Budget/production company/Walt Disney Pictures_production_companies.png\n",
      "\n",
      "***** genres_movies  PLOTING Was Save Successfully Save \n",
      "***** Ploting/genres_movies/production company/Walt Disney Pictures_production_companies.png\n",
      "\n",
      "*************** End  plot for Walt Disney Pictures_production_companies ***************\n",
      "*************** Start  plot for Touchstone Pictures_production_companies ***************\n",
      "***** Top_and_worst_10 by runtime PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/runtime/production company/Touchstone Pictures_production_companies.png\n",
      "\n",
      "***** Top_and_worst_10 by vote_average PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/vote_average/production company/Touchstone Pictures_production_companies.png\n",
      "\n",
      "***** Revenue_and_Budget  PLOTING Was Save Successfully Save \n",
      "***** Ploting/Revenue_and_Budget/production company/Touchstone Pictures_production_companies.png\n",
      "\n",
      "***** genres_movies  PLOTING Was Save Successfully Save \n",
      "***** Ploting/genres_movies/production company/Touchstone Pictures_production_companies.png\n",
      "\n",
      "*************** End  plot for Touchstone Pictures_production_companies ***************\n",
      "*************** Start  plot for Columbia Pictures Corporation_production_companies ***************\n",
      "***** Top_and_worst_10 by runtime PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/runtime/production company/Columbia Pictures Corporation_production_companies.png\n",
      "\n",
      "***** Top_and_worst_10 by vote_average PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/vote_average/production company/Columbia Pictures Corporation_production_companies.png\n",
      "\n",
      "***** Revenue_and_Budget  PLOTING Was Save Successfully Save \n",
      "***** Ploting/Revenue_and_Budget/production company/Columbia Pictures Corporation_production_companies.png\n",
      "\n",
      "***** genres_movies  PLOTING Was Save Successfully Save \n",
      "***** Ploting/genres_movies/production company/Columbia Pictures Corporation_production_companies.png\n",
      "\n",
      "*************** End  plot for Columbia Pictures Corporation_production_companies ***************\n"
     ]
    }
   ],
   "source": [
    "for _ in Top10.index:\n",
    "    \n",
    "    tempMain = df[df[_] == 1]\n",
    "\n",
    "    # what is most genres Revenue_and_Budget from 2000 to  2020\n",
    "    groupby_release_year = tempMain.groupby('release_year')\n",
    "    year = groupby_release_year.sum().index\n",
    "    budget = groupby_release_year['budget'].sum().values\n",
    "    revenue = groupby_release_year['revenue'].sum().values\n",
    "\n",
    "    # what is most genres Top_and_worst_10_vote_average movies .?\n",
    "    top_10_vote_average = tempMain.sort_values('vote_average',ascending=False)[:10]\n",
    "    worst_10_vote_average = tempMain.sort_values('vote_average',ascending=True)[:10]\n",
    "\n",
    "    # what is most genres Top_and_worst_10_ movies .?\n",
    "    top_10_runtime = tempMain.sort_values('runtime',ascending=False)[:10]\n",
    "    worst_10_runtime = tempMain.sort_values('runtime',ascending=True)[:10]\n",
    "\n",
    "    # what is most genres .?\n",
    "    all_genres_movies_count = tempMain[[x for x in tempMain.columns if \"genres\" in x]].sum().sort_values(ascending=False)\n",
    "    genres_Names = [x.replace('_genres','') for x in all_genres_movies_count.index]\n",
    "\n",
    "    \n",
    "    Company = _\n",
    "    print('*'*15,f'Start  plot for {Company}','*'*15)\n",
    "    Top_and_worst_10(top_10In=top_10_runtime,worst_10In=worst_10_runtime,Company=Company,ByWichColumn='runtime',fromHow='production company')\n",
    "    Top_and_worst_10(top_10In=top_10_vote_average,worst_10In=worst_10_vote_average,Company=Company,ByWichColumn='vote_average',fromHow='production company')\n",
    "    Revenue_and_Budget(revenueIn=revenue,budgetIn=budget,yearIn=year,Company=Company,fromHow='production company')\n",
    "    genres_movies(genres_movies_count=all_genres_movies_count.values,genres_Names=genres_Names,Compnay=Company,fromHow='production company')\n",
    "#     CountGenres(tempMain,title=Company)\n",
    "    print('*'*15,f'End  plot for {Company}','*'*15)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Get top 10 director  in Create Moveis\n",
    "**plot was save in (Ploting/Top10 creating movies/Top 10 director in Create Moveis.png)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "***** Top10 creating movies/Top 10 director in Create Moveis PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top10 creating movies/Top 10 director in Create Moveis.png\n"
     ]
    }
   ],
   "source": [
    "all_director_movies_count = df[[x for x in df.columns if \"_director\" in x]].sum().sort_values(ascending=False)\n",
    "Top10 = all_director_movies_count[:10]\n",
    "Top10_Columns_Names = [x for x in Top10.index]\n",
    "Top10_Names = [x.replace('_director','') for x in Top10.index]\n",
    "\n",
    "\n",
    "fig , ax = plt.subplots(nrows=1,ncols=1,figsize= (15,10))\n",
    "ax.set_title('Top 10 director in Create Moveis',fontsize=20)\n",
    "ax.set_xlabel('Moveis Count',fontsize=15)\n",
    "sns.barplot(Top10.values,Top10_Names,ax=ax) \n",
    "plt.savefig(f'Ploting/Top10 creating movies/Top 10 director in Create Moveis.png')\n",
    "print(\"*\"*5,f\"Top10 creating movies/Top 10 director in Create Moveis PLOTING Was Save Successfully Save \")\n",
    "print(\"*\"*5,f\"Ploting/Top10 creating movies/Top 10 director in Create Moveis.png\") \n",
    "# plt.show()\n",
    "plt.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Get details for top 10 director"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Woody Allen_director',\n",
       " 'Clint Eastwood_director',\n",
       " 'Steven Spielberg_director',\n",
       " 'Martin Scorsese_director',\n",
       " 'Ridley Scott_director',\n",
       " 'Steven Soderbergh_director',\n",
       " 'Ron Howard_director',\n",
       " 'Joel Schumacher_director',\n",
       " 'Brian De Palma_director',\n",
       " 'Tim Burton_director']"
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(Top10.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*************** Start  plot for Woody Allen_director ***************\n",
      "***** Top_and_worst_10 by runtime PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/runtime/director/Woody Allen_director.png\n",
      "\n",
      "***** Top_and_worst_10 by vote_average PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/vote_average/director/Woody Allen_director.png\n",
      "\n",
      "***** Revenue_and_Budget  PLOTING Was Save Successfully Save \n",
      "***** Ploting/Revenue_and_Budget/director/Woody Allen_director.png\n",
      "\n",
      "***** genres_movies  PLOTING Was Save Successfully Save \n",
      "***** Ploting/genres_movies/director/Woody Allen_director.png\n",
      "\n",
      "*************** End  plot for Woody Allen_director ***************\n",
      "*************** Start  plot for Clint Eastwood_director ***************\n",
      "***** Top_and_worst_10 by runtime PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/runtime/director/Clint Eastwood_director.png\n",
      "\n",
      "***** Top_and_worst_10 by vote_average PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/vote_average/director/Clint Eastwood_director.png\n",
      "\n",
      "***** Revenue_and_Budget  PLOTING Was Save Successfully Save \n",
      "***** Ploting/Revenue_and_Budget/director/Clint Eastwood_director.png\n",
      "\n",
      "***** genres_movies  PLOTING Was Save Successfully Save \n",
      "***** Ploting/genres_movies/director/Clint Eastwood_director.png\n",
      "\n",
      "*************** End  plot for Clint Eastwood_director ***************\n",
      "*************** Start  plot for Steven Spielberg_director ***************\n",
      "***** Top_and_worst_10 by runtime PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/runtime/director/Steven Spielberg_director.png\n",
      "\n",
      "***** Top_and_worst_10 by vote_average PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/vote_average/director/Steven Spielberg_director.png\n",
      "\n",
      "***** Revenue_and_Budget  PLOTING Was Save Successfully Save \n",
      "***** Ploting/Revenue_and_Budget/director/Steven Spielberg_director.png\n",
      "\n",
      "***** genres_movies  PLOTING Was Save Successfully Save \n",
      "***** Ploting/genres_movies/director/Steven Spielberg_director.png\n",
      "\n",
      "*************** End  plot for Steven Spielberg_director ***************\n",
      "*************** Start  plot for Martin Scorsese_director ***************\n",
      "***** Top_and_worst_10 by runtime PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/runtime/director/Martin Scorsese_director.png\n",
      "\n",
      "***** Top_and_worst_10 by vote_average PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/vote_average/director/Martin Scorsese_director.png\n",
      "\n",
      "***** Revenue_and_Budget  PLOTING Was Save Successfully Save \n",
      "***** Ploting/Revenue_and_Budget/director/Martin Scorsese_director.png\n",
      "\n",
      "***** genres_movies  PLOTING Was Save Successfully Save \n",
      "***** Ploting/genres_movies/director/Martin Scorsese_director.png\n",
      "\n",
      "*************** End  plot for Martin Scorsese_director ***************\n",
      "*************** Start  plot for Ridley Scott_director ***************\n",
      "***** Top_and_worst_10 by runtime PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/runtime/director/Ridley Scott_director.png\n",
      "\n",
      "***** Top_and_worst_10 by vote_average PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/vote_average/director/Ridley Scott_director.png\n",
      "\n",
      "***** Revenue_and_Budget  PLOTING Was Save Successfully Save \n",
      "***** Ploting/Revenue_and_Budget/director/Ridley Scott_director.png\n",
      "\n",
      "***** genres_movies  PLOTING Was Save Successfully Save \n",
      "***** Ploting/genres_movies/director/Ridley Scott_director.png\n",
      "\n",
      "*************** End  plot for Ridley Scott_director ***************\n",
      "*************** Start  plot for Steven Soderbergh_director ***************\n",
      "***** Top_and_worst_10 by runtime PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/runtime/director/Steven Soderbergh_director.png\n",
      "\n",
      "***** Top_and_worst_10 by vote_average PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/vote_average/director/Steven Soderbergh_director.png\n",
      "\n",
      "***** Revenue_and_Budget  PLOTING Was Save Successfully Save \n",
      "***** Ploting/Revenue_and_Budget/director/Steven Soderbergh_director.png\n",
      "\n",
      "***** genres_movies  PLOTING Was Save Successfully Save \n",
      "***** Ploting/genres_movies/director/Steven Soderbergh_director.png\n",
      "\n",
      "*************** End  plot for Steven Soderbergh_director ***************\n",
      "*************** Start  plot for Ron Howard_director ***************\n",
      "***** Top_and_worst_10 by runtime PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/runtime/director/Ron Howard_director.png\n",
      "\n",
      "***** Top_and_worst_10 by vote_average PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/vote_average/director/Ron Howard_director.png\n",
      "\n",
      "***** Revenue_and_Budget  PLOTING Was Save Successfully Save \n",
      "***** Ploting/Revenue_and_Budget/director/Ron Howard_director.png\n",
      "\n",
      "***** genres_movies  PLOTING Was Save Successfully Save \n",
      "***** Ploting/genres_movies/director/Ron Howard_director.png\n",
      "\n",
      "*************** End  plot for Ron Howard_director ***************\n",
      "*************** Start  plot for Joel Schumacher_director ***************\n",
      "***** Top_and_worst_10 by runtime PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/runtime/director/Joel Schumacher_director.png\n",
      "\n",
      "***** Top_and_worst_10 by vote_average PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/vote_average/director/Joel Schumacher_director.png\n",
      "\n",
      "***** Revenue_and_Budget  PLOTING Was Save Successfully Save \n",
      "***** Ploting/Revenue_and_Budget/director/Joel Schumacher_director.png\n",
      "\n",
      "***** genres_movies  PLOTING Was Save Successfully Save \n",
      "***** Ploting/genres_movies/director/Joel Schumacher_director.png\n",
      "\n",
      "*************** End  plot for Joel Schumacher_director ***************\n",
      "*************** Start  plot for Brian De Palma_director ***************\n",
      "***** Top_and_worst_10 by runtime PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/runtime/director/Brian De Palma_director.png\n",
      "\n",
      "***** Top_and_worst_10 by vote_average PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/vote_average/director/Brian De Palma_director.png\n",
      "\n",
      "***** Revenue_and_Budget  PLOTING Was Save Successfully Save \n",
      "***** Ploting/Revenue_and_Budget/director/Brian De Palma_director.png\n",
      "\n",
      "***** genres_movies  PLOTING Was Save Successfully Save \n",
      "***** Ploting/genres_movies/director/Brian De Palma_director.png\n",
      "\n",
      "*************** End  plot for Brian De Palma_director ***************\n",
      "*************** Start  plot for Tim Burton_director ***************\n",
      "***** Top_and_worst_10 by runtime PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/runtime/director/Tim Burton_director.png\n",
      "\n",
      "***** Top_and_worst_10 by vote_average PLOTING Was Save Successfully Save \n",
      "***** Ploting/Top_and_worst_10/vote_average/director/Tim Burton_director.png\n",
      "\n",
      "***** Revenue_and_Budget  PLOTING Was Save Successfully Save \n",
      "***** Ploting/Revenue_and_Budget/director/Tim Burton_director.png\n",
      "\n",
      "***** genres_movies  PLOTING Was Save Successfully Save \n",
      "***** Ploting/genres_movies/director/Tim Burton_director.png\n",
      "\n",
      "*************** End  plot for Tim Burton_director ***************\n"
     ]
    }
   ],
   "source": [
    "for _ in Top10.index:\n",
    "    \n",
    "    tempMain = df[df[_] == 1]\n",
    "\n",
    "    # what is most genres Revenue_and_Budget from 2000 to  2020\n",
    "    groupby_release_year = tempMain.groupby('release_year')\n",
    "    year = groupby_release_year.sum().index\n",
    "    budget = groupby_release_year['budget'].sum().values\n",
    "    revenue = groupby_release_year['revenue'].sum().values\n",
    "\n",
    "    # what is most genres Top_and_worst_10_vote_average movies .?\n",
    "    top_10_vote_average = tempMain.sort_values('vote_average',ascending=False)[:10]\n",
    "    worst_10_vote_average = tempMain.sort_values('vote_average',ascending=True)[:10]\n",
    "\n",
    "    # what is most genres Top_and_worst_10_ movies .?\n",
    "    top_10_runtime = tempMain.sort_values('runtime',ascending=False)[:10]\n",
    "    worst_10_runtime = tempMain.sort_values('runtime',ascending=True)[:10]\n",
    "\n",
    "    # what is most genres .?\n",
    "    all_genres_movies_count = tempMain[[x for x in tempMain.columns if \"genres\" in x]].sum().sort_values(ascending=False)\n",
    "    genres_Names = [x.replace('_genres','') for x in all_genres_movies_count.index]\n",
    "\n",
    "    \n",
    "    Company = _\n",
    "    print('*'*15,f'Start  plot for {Company}','*'*15)\n",
    "    Top_and_worst_10(top_10In=top_10_runtime,worst_10In=worst_10_runtime,Company=Company,ByWichColumn='runtime',fromHow='director')\n",
    "    Top_and_worst_10(top_10In=top_10_vote_average,worst_10In=worst_10_vote_average,Company=Company,ByWichColumn='vote_average',fromHow='director')\n",
    "    Revenue_and_Budget(revenueIn=revenue,budgetIn=budget,yearIn=year,Company=Company,fromHow='director')\n",
    "    genres_movies(genres_movies_count=all_genres_movies_count.values,genres_Names=genres_Names,Compnay=Company,fromHow='director')\n",
    "#     CountGenres(tempMain,title=Company)\n",
    "    print('*'*15,f'End  plot for {Company}','*'*15) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Get top 10 CAST  in Create Moveis\n",
    "**plot was save in (Ploting/Top 10 cast in Create Moveis.png)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "all_cast_movies_count = df[[x for x in df.columns if \"_CAST\" in x]].sum().sort_values(ascending=False)\n",
    "Top10 = all_cast_movies_count[:10]\n",
    "Top10_Columns_Names = [x for x in Top10.index]\n",
    "Top10_Names = [x.replace('_CAST','') for x in Top10.index]\n",
    "\n",
    "\n",
    "fig , ax = plt.subplots(nrows=1,ncols=1,figsize= (15,10))\n",
    "ax.set_title('Top 10 cast in Create Moveis',fontsize=20)\n",
    "ax.set_xlabel('Moveis Count',fontsize=15)\n",
    "sns.barplot(Top10.values,Top10_Names,ax=ax) \n",
    "plt.savefig(f'Ploting/Top 10 cast in Create Moveis.png')\n",
    "print(\"*\"*5,f\"Top 10 cast in Create Moveis PLOTING Was Save Successfully Save \")\n",
    "print(\"*\"*5,f\"Ploting/Top 10 cast in Create Moveis.png'\")\n",
    "# plt.show()\n",
    "plt.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Get details for top 10 CAST"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Robert De Niro_CAST',\n",
       " 'Samuel L. Jackson_CAST',\n",
       " 'Bruce Willis_CAST',\n",
       " 'Nicolas Cage_CAST',\n",
       " 'Michael Caine_CAST',\n",
       " 'Robin Williams_CAST',\n",
       " 'Morgan Freeman_CAST',\n",
       " 'John Cusack_CAST',\n",
       " 'John Goodman_CAST',\n",
       " 'Susan Sarandon_CAST']"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(Top10.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Get top 10 genres  in Create Moveis\n",
    "**plot was save in (Ploting/Top 10 genres Moveis Count.png)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "all_genres_companies_movies_count = df[[x for x in df.columns if \"genres\" in x]].sum().sort_values(ascending=False)\n",
    "Top10 = all_genres_companies_movies_count[:10]\n",
    "Top10_Columns_Names = [x for x in Top10.index]\n",
    "Top10_Names = [x.replace('_genres','') for x in Top10.index]\n",
    "\n",
    "\n",
    "fig , ax = plt.subplots(nrows=1,ncols=1,figsize= (15,10))\n",
    "ax.set_title('Top 10 genres Moveis Count ',fontsize=20)\n",
    "ax.set_xlabel('Moveis Count',fontsize=15)\n",
    "sns.barplot(Top10.values,Top10_Names,ax=ax)\n",
    "plt.savefig(f'Ploting/Top 10 genres Moveis Count.png')\n",
    "print(\"*\"*5,f\"Top 10 cast in Create Moveis PLOTING Was Save Successfully Save \")\n",
    "print(\"*\"*5,f\"Ploting/Top 10 genres Moveis Count.png\")\n",
    "# plt.show()\n",
    "plt.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Get details for top 10 genres "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Drama_genres',\n",
       " 'Comedy_genres',\n",
       " 'Thriller_genres',\n",
       " 'Action_genres',\n",
       " 'Romance_genres',\n",
       " 'Horror_genres',\n",
       " 'Adventure_genres',\n",
       " 'Crime_genres',\n",
       " 'Science Fiction_genres',\n",
       " 'Family_genres']"
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(Top10.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='conclusions'></a>\n",
    "## Conclusions\n",
    "\n",
    "> **Tip**: Finally, summarize your findings and the results that have been performed. Make sure that you are clear with regards to the limitations of your exploration. If you haven't done any statistical tests, do not imply any statistical conclusions. And make sure you avoid implying causation from correlation!\n",
    "\n",
    "> **Tip**: Once you are satisfied with your work, you should save a copy of the report in HTML or PDF form via the **File** > **Download as** submenu. Before exporting your report, check over it to make sure that the flow of the report is complete. You should probably remove all of the \"Tip\" quotes like this one so that the presentation is as tidy as possible. Congratulations!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
